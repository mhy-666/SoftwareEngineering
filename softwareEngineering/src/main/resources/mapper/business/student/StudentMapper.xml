<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Service.module.business.student.dao.StudentDao">

    <resultMap id="StudentVO" type="Service.module.business.student.domain.vo.StudentVO"></resultMap>
    <resultMap id="StudentExcelVO" type="Service.module.business.student.domain.vo.StudentExcelVO"></resultMap>
    <resultMap id="ExperimentProjectEntity" type="Service.module.business.experimentProject.domain.entity.ExperimentProjectEntity"></resultMap>
    <resultMap id="SelectingEntity" type="Service.module.business.selecting.domain.entity.SelectingEntity"></resultMap>
    <resultMap id="TeacherExperimentProjectEntity" type="Service.module.business.teacherExperimentProject.domain.entity.TeacherExperimentProjectEntity"></resultMap>
    <resultMap id="StuExperimentProjectReportEntity" type="Service.module.business.stuExperimentProjectReport.domain.entity.StuExperimentProjectReportEntity"></resultMap>
    <resultMap id="TeachingEntity" type="Service.module.business.teaching.domain.entity.TeachingEntity"></resultMap>
    <resultMap id="CourseResourceEntity" type="Service.module.business.courseResource.domain.entity.CourseResourceEntity"></resultMap>
    <resultMap id="CourseResourcePublishingEntity" type="Service.module.business.courseResourcePublishing.domain.entity.CourseResourcePublishingEntity"></resultMap>
    <resultMap id="StudentGetCourseVO" type="Service.module.business.student.domain.vo.StudentGetCourseVO"></resultMap>
    <resultMap id="StuConfrontationExerciseEntity" type="Service.module.business.stuConfrontationExercise.domain.entity.StuConfrontationExerciseEntity"></resultMap>
    <resultMap id="StuConfrontationExerciseAnswerVO" type="Service.module.business.student.domain.vo.StuConfrontationExerciseAnswerVO"></resultMap>


    <select id="queryConfrontResult" resultMap="StuConfrontationExerciseAnswerVO">
        select rs.student_id,rs.totals,rs.rank,rs.answer_time,eq.question,eq.`options`,eq.solution,
               CASE
                   WHEN (eb.question1_id=eq.question_id) THEN (rs.student_answer1)
                   WHEN (eb.question2_id=eq.question_id) THEN (rs.student_answer2)
                   WHEN (eb.question3_id=eq.question_id) THEN (rs.student_answer3)
                   END AS student_answer
                ,eq.question_id
        from (r_stu_confrontation_exercise as rs JOIN e_questionBank as eb on rs.questionbank_id=eb.id)join e_questions as eq on (eb.question1_id=eq.question_id or eb.question2_id=eq.question_id or eb.question3_id=eq.question_id)
        where rs.confrontation_id=#{queryDTO.confrontationId} and rs.student_id=#{queryDTO.studentId}
    </select>

    <select id="queryReportGrade" resultMap="StuExperimentProjectReportEntity">
        select * from r_stu_experiment_project_report where id=#{queryDTO.id} and course_id=#{queryDTO.courseId} and class_id=#{queryDTO.classId}
    </select>


    <select id="queryReportGrade" resultMap="StuExperimentProjectReportEntity">
        select * from r_stu_experiment_project_report where id=#{queryDTO.id} and course_id=#{queryDTO.courseId} and class_id=#{queryDTO.classId}
    </select>

    <update id="updateSubmitConfrontation">
        update r_stu_confrontation_exercise
        set r_stu_confrontation_exercise.totals=CASE
                                                    when (
                                                            (
                                                                        r_stu_confrontation_exercise.student_answer1 IN (select  solution1 from e_questionBank where e_questionBank.id=(select ec.questionbank_id from e_confrontation_exercise as ec where ec.confrontation_id=#{queryDTO.confrontationId})) and r_stu_confrontation_exercise.student_answer2 NOT IN (select  solution2 from e_questionBank where e_questionBank.id=(select ec.questionbank_id from e_confrontation_exercise as ec where ec.confrontation_id=#{queryDTO.confrontationId})) and
                                                                        r_stu_confrontation_exercise.student_answer3 NOT IN (select  solution3 from e_questionBank where e_questionBank.id=(select ec.questionbank_id from e_confrontation_exercise as ec where ec.confrontation_id=#{queryDTO.confrontationId}))
                                                                ) or
                                                            (
                                                                        r_stu_confrontation_exercise.student_answer1 NOT IN (select  solution1 from e_questionBank where e_questionBank.id=(select ec.questionbank_id from e_confrontation_exercise as ec where ec.confrontation_id=#{queryDTO.confrontationId})) and r_stu_confrontation_exercise.student_answer2  IN (select  solution2 from e_questionBank where e_questionBank.id=(select ec.questionbank_id from e_confrontation_exercise as ec where ec.confrontation_id=#{queryDTO.confrontationId})) and
                                                                        r_stu_confrontation_exercise.student_answer3 NOT IN (select  solution3 from e_questionBank where e_questionBank.id=(select ec.questionbank_id from e_confrontation_exercise as ec where ec.confrontation_id=#{queryDTO.confrontationId}))
                                                                ) or
                                                            (
                                                                        r_stu_confrontation_exercise.student_answer1 NOT IN (select  solution1 from e_questionBank where e_questionBank.id=(select ec.questionbank_id from e_confrontation_exercise as ec where ec.confrontation_id=#{queryDTO.confrontationId})) and r_stu_confrontation_exercise.student_answer2 NOT IN (select  solution2 from e_questionBank where e_questionBank.id=(select ec.questionbank_id from e_confrontation_exercise as ec where ec.confrontation_id=#{queryDTO.confrontationId})) and
                                                                        r_stu_confrontation_exercise.student_answer3  IN (select  solution3 from e_questionBank where e_questionBank.id=(select ec.questionbank_id from e_confrontation_exercise as ec where ec.confrontation_id=#{queryDTO.confrontationId}))
                                                                )
                                                        ) then (33.3)

                                                    when (
                                                            (
                                                                        r_stu_confrontation_exercise.student_answer1 IN (select  solution1 from e_questionBank where e_questionBank.id=(select ec.questionbank_id from e_confrontation_exercise as ec where ec.confrontation_id=#{queryDTO.confrontationId})) and r_stu_confrontation_exercise.student_answer2  IN (select  solution2 from e_questionBank where e_questionBank.id=(select ec.questionbank_id from e_confrontation_exercise as ec where ec.confrontation_id=#{queryDTO.confrontationId})) and
                                                                        r_stu_confrontation_exercise.student_answer3 NOT IN (select  solution3 from e_questionBank where e_questionBank.id=(select ec.questionbank_id from e_confrontation_exercise as ec where ec.confrontation_id=#{queryDTO.confrontationId}))
                                                                ) or
                                                            (
                                                                        r_stu_confrontation_exercise.student_answer1 NOT IN (select  solution1 from e_questionBank where e_questionBank.id=(select ec.questionbank_id from e_confrontation_exercise as ec where ec.confrontation_id=#{queryDTO.confrontationId})) and r_stu_confrontation_exercise.student_answer2  IN (select  solution2 from e_questionBank where e_questionBank.id=(select ec.questionbank_id from e_confrontation_exercise as ec where ec.confrontation_id=#{queryDTO.confrontationId})) and
                                                                        r_stu_confrontation_exercise.student_answer3  IN (select  solution3 from e_questionBank where e_questionBank.id=(select ec.questionbank_id from e_confrontation_exercise as ec where ec.confrontation_id=#{queryDTO.confrontationId}))
                                                                ) or
                                                            (
                                                                        r_stu_confrontation_exercise.student_answer1  IN (select  solution1 from e_questionBank where e_questionBank.id=(select ec.questionbank_id from e_confrontation_exercise as ec where ec.confrontation_id=#{queryDTO.confrontationId})) and r_stu_confrontation_exercise.student_answer2 NOT IN (select  solution2 from e_questionBank where e_questionBank.id=(select ec.questionbank_id from e_confrontation_exercise as ec where ec.confrontation_id=#{queryDTO.confrontationId})) and
                                                                        r_stu_confrontation_exercise.student_answer3  IN (select  solution3 from e_questionBank where e_questionBank.id=(select ec.questionbank_id from e_confrontation_exercise as ec where ec.confrontation_id=#{queryDTO.confrontationId}))
                                                                )
                                                        ) then (66.7)

                                                    when (
                                                        (
                                                                    r_stu_confrontation_exercise.student_answer1 IN (select  solution1 from e_questionBank where e_questionBank.id=(select ec.questionbank_id from e_confrontation_exercise as ec where ec.confrontation_id=#{queryDTO.confrontationId})) and r_stu_confrontation_exercise.student_answer2 IN (select  solution2 from e_questionBank where e_questionBank.id=(select ec.questionbank_id from e_confrontation_exercise as ec where ec.confrontation_id=#{queryDTO.confrontationId})) and
                                                                    r_stu_confrontation_exercise.student_answer3 IN (select  solution3 from e_questionBank where e_questionBank.id=(select ec.questionbank_id from e_confrontation_exercise as ec where ec.confrontation_id=#{queryDTO.confrontationId}))
                                                            )
                                                        ) then (100)
            END
        where student_id=#{queryDTO.studentId} and course_id=#{queryDTO.courseId} and class_id=#{queryDTO.classId} and confrontation_id=#{queryDTO.confrontationId}
    </update>

    <insert id="SubmitConfrontation">
        insert into  r_stu_confrontation_exercise(student_id,course_id,class_id,confrontation_id,student_answer1,student_answer2,student_answer3,answer_time,groupNum,confrontation_name,questionbank_id)
        values(#{queryDTO.studentId},#{queryDTO.courseId},#{queryDTO.classId},#{queryDTO.confrontationId},#{queryDTO.student_answer1},#{queryDTO.student_answer2},#{queryDTO.student_answer3},#{queryDTO.answer_time}
        ,if( (#{queryDTO.confrontationId} not in (select rs.confrontation_id from r_stu_confrontation_exercise as rs)),1,(select MAX(r.groupNum)+1 from r_stu_confrontation_exercise as r where r.confrontation_id=#{queryDTO.confrontationId})),(select confrontation_name from e_confrontation_exercise as e where #{queryDTO.confrontationId}=e.confrontation_id),(select questionbank_id from e_confrontation_exercise as e where #{queryDTO.confrontationId}=e.confrontation_id))
    </insert>

    <select id="queryCourse" resultMap="StudentGetCourseVO">
        select t_classinfo.course_id,t_classinfo.class_id,t_classinfo.class_term,t_course.`name`,e_teacher.`name`,t_course.credit,e_teacher.department,t_classinfo.place
        from r_selecting join t_classinfo on r_selecting.class_id=t_classinfo.class_id and r_selecting.class_term=t_classinfo.class_term and r_selecting.course_id=t_classinfo.course_id join t_course on t_classinfo.course_id=t_course.id join r_teaching on t_classinfo.class_id=r_teaching.class_id and t_classinfo.course_id=r_teaching.course_id and t_classinfo.class_term=r_teaching.class_term join e_teacher on r_teaching.id=e_teacher.id
        where r_selecting.student_id=#{queryDTO.id}
    </select>

    <select id="queryProject" resultMap="ExperimentProjectEntity">
        select * from e_experiment_project where course_id=#{queryDTO.courseId} and class_id=#{queryDTO.classId}
    </select>

    <select id="queryGrade" resultMap="SelectingEntity">
        select * from r_selecting where student_id=#{queryDTO.id} and course_id=#{queryDTO.courseId} and class_id=#{queryDTO.classId}
    </select>

    <select id="queryProDetail" resultMap="TeacherExperimentProjectEntity">
        select * from r_teacher_experiment_project where course_id=#{queryDTO.courseId} and class_id=#{queryDTO.classId} and id=#{queryDTO.projectId}
    </select>

    <select id="queryReportDetail" resultMap="StuExperimentProjectReportEntity">
        select * from r_stu_experiment_project_report where id=#{queryDTO.id} and course_id=#{queryDTO.courseId} and class_id=#{queryDTO.classId} and project_id=#{queryDTO.projectId}
    </select>

    <insert id="addReportDetail">
        insert into r_stu_experiment_project_report(id,project_id,course_id,class_id,purpose,principle,content,summary)
        values (#{queryDTO.id},#{queryDTO.projectId},#{queryDTO.courseId},#{queryDTO.classId},
                #{queryDTO.purpose},#{queryDTO.principle}, #{queryDTO.content},#{queryDTO.summary})
    </insert>

    <select id="t_queryReportDetail" resultMap="StuExperimentProjectReportEntity">
        select * from r_stu_experiment_project_report where course_id=#{queryDTO.courseId} and class_id=#{queryDTO.classId} and project_id=#{queryDTO.projectId}
    </select>

<!--    <insert id="addProject">-->
<!--        insert #{queryDTO.course_id},#{queryDTO.class_id},#{queryDTO.project_id},-->
<!--        #{queryDTO.purpose},#{queryDTO.principle}, #{queryDTO.content},#{queryDTO.summary}-->
<!--        into r_stu_experiment_project_report values(id,course_id,class_id,project_id,purpose,principle,content,summary)-->
<!--    </insert>-->

    <update id="updateReportGrade">
        update r_stu_experiment_project_report
            set grade = #{queryDTO.grade},correct_teacher_id=#{queryDTO.correctTeacherId}
            where id=#{queryDTO.id} and course_id=#{queryDTO.courseId} and class_id=#{queryDTO.classId}
            and project_id=#{queryDTO.projectId} and report_id=#{queryDTO.reportId}
    </update>

   <update id="updateScoreWeights">
       update r_teaching
           set attendance_weights=#{queryDTO.attendanceWeights},experiment_weights=#{experimentWeights}
       where id=#{queryDTO.id} and course_id=#{queryDTO.courseId} and class_id=#{queryDTO.classId}
   </update>

    <select id="queryRescource" resultMap="CourseResourcePublishingEntity">
        select * from r_course_resource_publishing where course_id=#{queryDTO.courseId} and class_id=#{queryDTO.classId}
    </select>


    <select id="queryByPage" resultMap="StudentVO">
        select
          id,
          name,
          age,
          sex,
          phone_number,
          email,
          notes,
          user_status,
          identity
        from e_student
        <where>
            <if test="queryDTO.id != null">
                AND id = #{queryDTO.id}
            </if>
            <if test="queryDTO.name != null and queryDTO.name != ''">
                AND INSTR(name,#{queryDTO.name})
            </if>
            <if test="queryDTO.age != null">
                AND age = #{queryDTO.age}
            </if>
            <if test="queryDTO.sex != null and queryDTO.sex != ''">
                AND sex = #{queryDTO.sex}
            </if>
            <if test="queryDTO.phoneNumber != null and queryDTO.phoneNumber != ''">
                AND phone_number = #{queryDTO.phoneNumber}
            </if>
            <if test="queryDTO.email != null and queryDTO.email != ''">
                AND email = #{queryDTO.email}
            </if>
            <if test="queryDTO.notes != null and queryDTO.notes != ''">
                AND INSTR(notes,#{queryDTO.notes})
            </if>
            <if test="queryDTO.userStatus != null and queryDTO.userStatus != ''">
                AND INSTR(user_status,#{queryDTO.userStatus})
            </if>
            <if test="queryDTO.identity != null and queryDTO.identity != ''">
                AND INSTR(identity,#{queryDTO.identity})
            </if>

            <if test="queryDTO.createTimeBegin != null ">
                AND create_time &gt;= #{queryDTO.createTimeBegin}
            </if>
            <if test="queryDTO.createTimeEnd != null ">
                AND create_time &lt;= #{queryDTO.createTimeEnd}
            </if>

            <if test="queryDTO.updateTimeBegin != null ">
                AND update_time &gt;= #{queryDTO.updateTimeBegin}
            </if>
            <if test="queryDTO.updateTimeEnd != null ">
                AND update_time &lt;= #{queryDTO.updateTimeEnd}
            </if>
        </where>
    </select>

<!--    <select id="queryGetProject" resultMap="StudentGetProjectVO">-->
<!--        select id, name from e_experiment_project where report_uploader_id = #{GetProjectdto.id} or course_id = #{GetProjectdto.courseId}-->
<!--    </select>-->

    <select id="queryAllExportData" resultMap="StudentExcelVO">
        select
           id,
           name,
           age,
           sex,
           phone_number,
           email,
           notes,
           user_status,
           identity
        from e_student
        <where>
            <if test="queryDTO.id != null">
                AND id = #{queryDTO.id}
            </if>
            <if test="queryDTO.name != null and queryDTO.name != ''">
                AND INSTR(name,#{queryDTO.name})
            </if>
            <if test="queryDTO.age != null">
                AND age = #{queryDTO.age}
            </if>
            <if test="queryDTO.sex != null and queryDTO.sex != ''">
                AND sex = #{queryDTO.sex}
            </if>
            <if test="queryDTO.phoneNumber != null and queryDTO.phoneNumber != ''">
                AND phone_number = #{queryDTO.phoneNumber}
            </if>
            <if test="queryDTO.email != null and queryDTO.email != ''">
                AND email = #{queryDTO.email}
            </if>
            <if test="queryDTO.notes != null and queryDTO.notes != ''">
                AND INSTR(notes,#{queryDTO.notes})
            </if>
            <if test="queryDTO.userStatus != null and queryDTO.userStatus != ''">
                AND INSTR(user_status,#{queryDTO.userStatus})
            </if>
            <if test="queryDTO.identity != null and queryDTO.identity != ''">
                AND INSTR(identity,#{queryDTO.identity})
            </if>

            <if test="queryDTO.createTimeBegin != null ">
                AND create_time &gt;= #{queryDTO.createTimeBegin}
            </if>
            <if test="queryDTO.createTimeEnd != null ">
                AND create_time &lt;= #{queryDTO.createTimeEnd}
            </if>

            <if test="queryDTO.updateTimeBegin != null ">
                AND update_time &gt;= #{queryDTO.updateTimeBegin}
            </if>
            <if test="queryDTO.updateTimeEnd != null ">
                AND update_time &lt;= #{queryDTO.updateTimeEnd}
            </if>
        </where>
    </select>

    <select id="queryBatchExportData" resultMap="StudentExcelVO">
        select
         id,
         name,
         age,
         sex,
         phone_number,
         email,
         notes,
         user_status,
         identity
        from e_student
        where id in
        <foreach collection="idList" open="(" close=")" separator="," item="item">
            #{item}
        </foreach>
    </select>

    <delete id="deleteById">
        delete from e_student where id = #{id}
    </delete>

    <delete id="deleteByIdList">
        delete from e_student where id in
        <foreach collection="idList" open="(" close=")" separator="," item="item">
            #{item}
        </foreach>
    </delete>

</mapper>
